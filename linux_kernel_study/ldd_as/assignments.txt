Driver Basics
-------------
1. How is the dependency generated for modprobe & where is it stored?
Depmod will generate the dependency list and it is stored in the depmod.dep file
2. How do we change the log level for printk?
https://en.wikipedia.org/wiki/Printk
KERN_EMERG, KERN_ALERT, KERN_CRIT, KERN_ERR, 
3. Integrate the first_driver.c into the Kernel build system.
Changes need to be done with kbuild 

Character Drivers
-----------------
1. Register the basic character driver and verify the registration under /proc/devices.
2. Try dereferening he user space buffer in read operation
3. Exchange the data with User space with copy_to_user and copy_from_user
4. Enhance the driver to send last character of previously written string.
   For example:
    echo -n "abcd" > /dev/abc
    cat /dev/abc (Should give 'd')
5. Write a driver to get & set the value of driver global variable using the ioctl.
6. Write a character driver to add the support for 2 minors i.e to support 2 device files. Read operation on first
device file should print 'Read on first device file' and operation on second device file should print 'Read on second
device file.
7. Write a udev rule to auto-load/unload a driver module when pen driver is plugged-in/plugged-out respectively.

Module Parameters
-----------------
1. Write a driver to pass integer value as module parameter
2. Change the parameter value at runtime.
3. Enhance the driver to pass array of integers as module parameter
	https://stackoverflow.com/questions/10994576/passing-an-array-as-command-line-argument-for-linux-kernel-module
	https://www.linuxtopia.org/online_books/linux_kernel/linux_kernel_module_programming_2.6/x323.html
4. Enahance the driver to register the callback handler for parameters change
      https://stackoverflow.com/questions/34957016/signal-on-kernel-parameter-change
      https://github.com/Embetronicx/Tutorials/blob/master/Linux/Device_Driver/Passing_arguments_to_Linux_device_driver/hello_world.c

Synchronization
---------------
1. Use atomic_inc/atomic_dec to increment/decrement the atomic global variable
./Exercises/Slides/KernelProcessManagement.pdf:    CPU instructions that provide the atomic read-modify-
./Exercises/Slides/KernelProcessManagement.pdf:    Handy for manipulation of shared data atomically in
./Exercises/Slides/KernelProcessManagement.pdf:    Generic atomic operation interfaces include support for integer
./Exercises/Slides/KernelProcessManagement.pdf:    Integer operations operate on atomic_t & atomic64_t
./Exercises/Slides/KernelProcessManagement.pdf:    –   atomic_read(v)
./Exercises/Slides/KernelProcessManagement.pdf:    –   atomic_set(v, i)
./Exercises/Slides/KernelProcessManagement.pdf:    –   atomic_add(init i, atomic_t *v)
./Exercises/Slides/KernelProcessManagement.pdf:    –   atomic_sub(int i, atomic_t *v)
./Exercises/Slides/KernelProcessManagement.pdf:    –   atomic_inc(atomic_t *v)
./Exercises/Slides/KernelProcessManagement.pdf:    –   atomic_dec(atomic_t *v)
./Exercises/Slides/KernelProcessManagement.pdf:    –   bool atomic_sub_and_test(int i, atomic_t *v)
./Exercises/Slides/KernelProcessManagement.pdf:    –   bool atomic_dec_and_test(atomic_t *v)
./Exercises/Slides/KernelProcessManagement.pdf:    –   bool atomic_dec_and_test(atomic_t *v)
./Exercises/Slides/KernelProcessManagement.pdf:    RCU infrastructure in turn uses global atomic counters and
./Exercises/Slides/KernelProcessManagement.pdf:    – Making updates atomic would help solves this issue
./Exercises/Slides/KernelProcessManagement.pdf:    – The notifier chain is executed in interrupt or atomic context
https://github.com/Embetronicx/Tutorials/blob/master/Linux/Device_Driver/Atomic_variable/driver.c

2. Modify rwsem to use the read write spinlock
./as_training_session/Exercises/ProcessMngmt/Synchronization/rwsem.c:static struct rw_semaphore rwsem;
./as_training_session/Exercises/ProcessMngmt/Synchronization/rwsem.c:   down_read(&rwsem);
./as_training_session/Exercises/ProcessMngmt/Synchronization/rwsem.c:   up_read(&rwsem);
./as_training_session/Exercises/ProcessMngmt/Synchronization/rwsem.c:   down_write(&rwsem);
./as_training_session/Exercises/ProcessMngmt/Synchronization/rwsem.c:   up_write(&rwsem);
./as_training_session/Exercises/ProcessMngmt/Synchronization/rwsem.c:   init_rwsem(&rwsem);

3. Write a driver to protect the global variable using seqlock. The example should hit the scenario where reader sees the
inconsitencies and had to retry.
4. Write a driver which uses list apis to add and delete the list items.
https://www.kernel.org/doc/html/v4.19/core-api/kernel-api.html
https://github.com/Embetronicx/Tutorials/blob/master/Linux/Device_Driver/Linked_List/driver.c
5. Modify above driver to have 3 threads - one which adds the node, one which deletes the node, one which traverses the
list. Use read-write lock as synchronization mechanism
6. Modify above driver to use seq lock
7. Modify above driver to use rcu for the lists

Waiting/Blocking
----------------
1. Modify sched2.c to use the wait queue.
2. Enhance the above driver to have 2 minors & hence 2 device files. Process invoking read on each device file should be
   blocked on same wait queue, but differnt wake up condition. For instance, echo 'x' > /proc/wait should wake up the
   process which is waiting on first device file and echo 'y' > /proc/wait should wake up the process waiting on second
   device file. 
3. Create a character driver which blocks the read operation on completion data structure. Use the write operation to
   unblock the read operation. Further to this, invoke read from multiple shells & try to wake them simultaneously.
4. Enhance the above driver to send the completion only when any of the thread is waiting

Notifier Chains
---------------
1. Write a driver to publish the notifier chain & create another driver to subscribe to the notifier chain. (Refer
drivers/usb/core/notify.c)
2. Write a driver to register for the usb notifier and print the messages when the device is added or removed (Refer
drivers/usb/core/notify.c)
https://www.opensourceforu.com/2009/01/the-crux-of-linux-notifier-chains/
https://0xax.gitbooks.io/linux-insides/content/Concepts/linux-cpu-4.html
3. Enhance the keyboard_notifier to include the support for character driver. The keys are buffered and sent to the user
space, when its requested
4. Enhance the above driver to add the support for ioctl to clear the keylogger buffer.
https://github.com/jarun/spy/blob/master/spy.c
http://redgetan.cc/lets-write-a-kernel-keylogger/ --> last step to hide the module 
5. Enhance the above driver to set the keylogger buffer size using the module params.
6. Modify the driver further to use the kfifo to hold the keys & transfer the same to user space.
./Exercises/ProcessMngmt/Kfifo/kfifo.c:#include <linux/kfifo.h>
./Exercises/ProcessMngmt/Kfifo/kfifo.c:    printk(KERN_INFO "kfifo test start\n");
./Exercises/ProcessMngmt/Kfifo/kfifo.c:        kfifo_put(&test, i);
./Exercises/ProcessMngmt/Kfifo/kfifo.c:    printk(KERN_INFO "fifo len: %u\n", kfifo_len(&test));
./Exercises/ProcessMngmt/Kfifo/kfifo.c:    ret = kfifo_out(&test, buf, 2);
./Exercises/ProcessMngmt/Kfifo/kfifo.c:    ret = kfifo_in(&test, buf, ret);
./Exercises/ProcessMngmt/Kfifo/kfifo.c:    kfifo_skip(&test);
./Exercises/ProcessMngmt/Kfifo/kfifo.c:    for (i = 20; kfifo_put(&test, i); i++)
./Exercises/ProcessMngmt/Kfifo/kfifo.c:    printk(KERN_INFO "queue len: %u\n", kfifo_len(&test));
./Exercises/ProcessMngmt/Kfifo/kfifo.c:    if (kfifo_peek(&test, &i))
./Exercises/ProcessMngmt/Kfifo/kfifo.c:    while (kfifo_get(&test, &i)) {

Timing Management
-----------------
1. Modify timers.c to create a multi-shot timer
2. Complete todos in mysleep.c to implement the sleep using timer
3. Implement the timer to poll the keyboard status register for the presence of any character

Interrupt Management
--------------------
1. Modify the kbd_interrupt.c to read the scan code and print the same
2. Modify tasklet.c to schedule the tasklet with high & normal priority and observe the effect
3. Enhance kbd_interrupt.c further to convert the scan code to the corresponding keys in tasklet and print the same
4. Modify kbd_interrupt.c to use workqueue as bottom half.
5. Modify kbd_interrupt.c to use threaded irq and print the key in thread.
6. Enhance kbd_interrupt.c to add the support for character driver interface. The user space process should be blocked
on the keys. The bottom half should buffer the keys & wake up the user space process, when the buffer has atleast 20
keys.

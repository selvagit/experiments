1) mod02lec06
	in cmos nand , nor , nand are easy
	assign statement is used for mostlyt combinational circuit
	21:21 instaneous and continuos assingment
 	23:32 net data type	
		default high impedance state
	28:15 how is output and wand be name as same variable
	29:40 data value and signsl strength
		x -> unknown logic state
		z -> high impedance
	30:45 signal strength
		8 level , effective in mos


2) mod02lec07A verilog (part-2)
	0:30 register data type, it not similar to hardware register 	
	2:40 may be mapping on hardware register
	3:00 register data type
		time is a simulation variable
	6:30 reg data type
	8:45 example
		a single variable being output and register 
	10:30 rst 
		a synchronize reset
	11:50 interger data type
        14:00 C is 17 bit register
	14:35 real data type
	16:15 time data type
	17:50 vectors
		use [MSB:LSB]
		reg data[1:10] is also valid	
		reg data2[10:1] is common
	22:00 section of vector, slicing of vector	
		slice and assign
	26:00 multi dimensional array and memories
		reg [31:0] register_bank[15:0] // 16 32 bit registers
			accessing register_bank[5]
		interger matrix[0:5][0:5] // matrix od 2 dim each element iof 32
		reg mem_bit[0:2047] // 2k 1-bit words 
		reg [15:0] mem_word [0:1023] // 1k 16 bit words
	28:50	constants	
			size or unsized
			<size>'<base><number>
	30:25 parameter
		similar to #define 
			
3) mod02lec08 A	verilog (part-3)
	1:00 predefined logic gates
	4:40 and,not,nand
		for normal gates number of inputs are arbitary
	7:00 buffer symbol diagram and explanation	
	10:00 example of xor 
	13:00 timescale 
	14:30 specifying the connectivity
		positional association
		explicit association
	17:20 positional association
	18:39 explicit association
	20:00 modelling issues
		flip-flop edge-triggered storage cell
		latch level-triggered storage cell
		register can map to wire or storage cell
	21:10 reg_maps_to_wire
	24:00 a_problem_case reg maps to register
	25:37 incomplete statement generates a latch
	
4) mod02lec09 verilog operator
	1:40 verilog operators
	2:00 arthematic operators
		unary, binary 
		-, +, *, /, **
	5:20 logic operators
		! , &&, ||	
	10:23 relational operators
		>, <, <=, >=, ==, !=
	12:00 bitwise operators
		~, &, |, ^, ~^
	14:40 reduction operators
		&, |, ~&, ~|, ^, ~^
		~& bitwise NAND
		~| bitwise NOR
		operators on group of bits
		all operator are unary operator
	22:50 shift operator
		>>, <<, >>>	
		>>> two complement number system
			same sign bit will be inserted
	28:20 concatenation operator
		{..., ..., ...}
	29:10 replication operator
		{n{m}}
	32:30 8-bit address description
        32:31 operator precedence	
	35:00 === , !==
		exact equal

5) mod02lec10 verilog module example-1 
	3:22 	behavioural modelling
 	7:30 	16to1 mux	
	11:10	pure behaviourial model
	23:30 version 2
		behavioural modelling of 4 to 1 mux
	       	structural modelling of 16 to 1 mux
	26:50 version 3
		behavioural modelling of 2-to-1 mux
		structural modelling of 4-to-1 mux	
	25:55 version 4
		strutural modelling of 2-to-1 mux

6) mod02lec11 verilog module example-2
	01:30 ALU	
	
	
	
	
